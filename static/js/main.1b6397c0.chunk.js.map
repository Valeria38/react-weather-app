{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Fragment","Form","props","getWeather","onSubmit","type","name","placeholder","Weather","_props$details","details","temperature","city","country","humidity","description","error","API_KEY","App","state","_callee","event","apiCall","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","then","data","json","sent","console","log","_this","setState","main","temp","sys","weather","message","stop","className","components_Titles","components_Form","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAWeA,SATC,WACd,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,4DCUSE,EAdF,SAACC,GAAU,IACdC,EAAeD,EAAfC,WAER,OACEN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,QAAMK,SAAUD,GACdN,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3CV,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9CV,EAAAC,EAAAC,cAAA,iCCiBOS,EAzBC,SAACN,GAAU,IAAAO,EAQrBP,EAAMQ,QANRC,EAFuBF,EAEvBE,YACAC,EAHuBH,EAGvBG,KACAC,EAJuBJ,EAIvBI,QACAC,EALuBL,EAKvBK,SACAC,EANuBN,EAMvBM,YACAC,EAPuBP,EAOvBO,MAGF,OACEnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIW,IAAgBK,GAClBnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,sBAAca,EAAd,KAAsBC,GACtBhB,EAAAC,EAAAC,cAAA,yBAAiBY,GACjBd,EAAAC,EAAAC,cAAA,sBAAce,GACdjB,EAAAC,EAAAC,cAAA,wBAAgBgB,IAEhBC,GAASA,ICfXC,EAAU,mCAkDDC,6MA/CbC,MAAQ,CACNR,YAAa,KACbC,KAAM,KACNC,QAAS,KACTC,SAAU,KACVC,YAAa,KACbC,MAAO,QAGTb,iDAAa,SAAAiB,EAAOC,GAAP,IAAAT,EAAAC,EAAAS,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXN,EAAMO,iBAEAhB,EAAOS,EAAMQ,OAAOC,SAASlB,KAAKmB,MAClClB,EAAUQ,EAAMQ,OAAOC,SAASjB,QAAQkB,MAJnCN,EAAAE,KAAA,EAMWK,MAAK,qDAAAC,OAAsDrB,EAAtD,KAAAqB,OAA8DpB,EAA9D,WAAAoB,OAA+EhB,EAA/E,kBAC1BiB,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAPR,OAMLd,EANKG,EAAAY,KAQXC,QAAQC,IAAIjB,GAEPV,GAAQC,GAAWS,EAAQhB,KAC9BkC,EAAKC,SAAS,CACZ9B,YAAaW,EAAQoB,KAAKC,KAC1B/B,KAAMU,EAAQhB,KACdO,QAASS,EAAQsB,IAAI/B,QACrBC,SAAUQ,EAAQoB,KAAK5B,SACvBC,YAAaO,EAAQuB,QAAQ,GAAG9B,YAChCC,MAAO,KAGTwB,EAAKC,SAAS,CACZzB,MAAOM,EAAQwB,UArBR,wBAAArB,EAAAsB,SAAA3B,oIA4BX,OACEvB,EAAAC,EAAAC,cAAA,OAAKiD,UAAU,OACbnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,CAAM/C,WAAYgD,KAAKhD,aACvBN,EAAAC,EAAAC,cAACqD,EAAD,CAAS1C,QAASyC,KAAKhC,gBA1CbkC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.1b6397c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst  Titles = () => {\r\n  return (\r\n    <>\r\n      <h1>Weather Finder</h1>\r\n      <p>Find out temperature, conditions and more...</p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n  const { getWeather } = props;\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n        <button>Get weather!</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n  const { \r\n    temperature, \r\n    city, \r\n    country, \r\n    humidity, \r\n    description, \r\n    error \r\n  } = props.details;\r\n\r\n  return (\r\n    <>\r\n      { temperature && !error &&\r\n      <>\r\n        <p>Location: {city}, {country}</p>\r\n        <p>Temperature: {temperature}</p>\r\n        <p>Humidity: {humidity}</p>\r\n        <p>Conditions: {description}</p>\r\n      </> }\r\n      { error && error }\r\n    </>\r\n    )\r\n\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = 'a0566e095cd90afd26c1dc52103ca1d0';\n\nclass App extends Component {\n  state = {\n    temperature: null,\n    city: null,\n    country: null,\n    humidity: null,\n    description: null,\n    error: null\n  };\n\n  getWeather = async (event) => {\n    event.preventDefault();\n\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n\n    const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n    .then(data => data.json());\n    console.log(apiCall);\n\n    if ( city && country && apiCall.name ) {\n      this.setState({\n        temperature: apiCall.main.temp,\n        city: apiCall.name,\n        country: apiCall.sys.country,\n        humidity: apiCall.main.humidity,\n        description: apiCall.weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        error: apiCall.message\n      });\n    }\n}\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Titles />\n        <Form getWeather={this.getWeather} />\n        <Weather details={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}